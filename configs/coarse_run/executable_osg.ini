; Configuration file for using locally installed executables

[executables]
average_psd = singularity:///usr/local/bin/pycbc_average_psd
bank2hdf = singularity:///usr/local/bin/pycbc_coinc_bank2hdf
calculate_psd = singularity:///usr/local/bin/pycbc_calculate_psd
coinc = singularity:///usr/local/bin/pycbc_coinc_findtrigs
combine_statmap = singularity:///usr/local/bin/pycbc_combine_statmap
fit_by_template = singularity:///usr/local/bin/pycbc_fit_sngls_by_template
fit_over_param = singularity:///usr/local/bin/pycbc_fit_sngls_over_multiparam
foreground_censor = singularity:///usr/local/bin/pycbc_foreground_censor
;hdfinjfind =singularity:///usr/local/bin/ycbc_coinc_hdfinjfind
hdf_trigger_merge = singularity:///usr/local/bin/pycbc_coinc_mergetrigs
;inj2hdf = singularity:///usr/local/bin/pycbc_convertinjfiletohdf
;inj_cut = singularity:///usr/local/bin/pycbc_inj_cut
;injections = singularity:///usr/local/bin/lalapps_inspinj
inspiral = singularity:///usr/local/bin/pycbc_inspiral

merge_psds =singularity:///usr/local/bin/pycbc_merge_psds
;optimal_snr = singularity:///usr/local/bin/pycbc_optimal_snr
;optimal_snr_merge = singularity:///usr/local/bin/pycbc_merge_inj_hdf
page_foreground = singularity:///usr/local/bin/pycbc_page_foreground
page_ifar = singularity:///usr/local/bin/pycbc_page_ifar
page_ifar_catalog = singularity:///usr/local/bin/pycbc_ifar_catalog
;page_injections =singularity:///usr/local/bin/pycbc_page_injtable
page_segplot = singularity:///usr/local/bin/pycbc_page_segplot
page_segtable = singularity:///usr/local/bin/pycbc_page_segtable
page_versioning = singularity:///usr/local/bin/pycbc_page_versioning
page_vetotable = singularity:///usr/local/bin/pycbc_page_vetotable
plot_bank = singularity:///usr/local/bin/pycbc_plot_bank_bins
plot_binnedhist = singularity:///usr/local/bin/pycbc_fit_sngls_split_binned
plot_coinc_snrchi = singularity:///usr/local/bin/pycbc_page_coinc_snrchi
plot_foundmissed = singularity:///usr/local/bin/pycbc_page_foundmissed
plot_gating = singularity:///usr/local/bin/pycbc_plot_gating
plot_hist = singularity:///usr/local/bin/pycbc_plot_hist
plot_qscan = singularity:///usr/local/bin/pycbc_plot_qscan
plot_range = singularity:///usr/local/bin/pycbc_plot_range
plot_segments = singularity:///usr/local/bin/pycbc_page_segments
plot_sensitivity = singularity:///usr/local/bin/pycbc_page_sensitivity
plot_singles = singularity:///usr/local/bin/pycbc_plot_singles_vs_params
plot_snrchi = singularity:///usr/local/bin/pycbc_page_snrchi
plot_snrifar = singularity:///usr/local/bin/pycbc_page_snrifar
plot_spectrum = singularity:///usr/local/bin/pycbc_plot_psd_file
plot_throughput = singularity:///usr/local/bin/pycbc_plot_throughput
results_page = singularity:///usr/local/bin/pycbc_make_html_page
splitbank = singularity:///usr/local/bin/pycbc_hdf5_splitbank
statmap = singularity:///usr/local/bin/pycbc_coinc_statmap
;statmap_inj = singularity:///usr/local/bin/pycbc_coinc_statmap_inj

sngls = singularity:///usr/local/bin/pycbc_sngls_findtrigs
;finds candidate triggers for single detectors
sngls_statmap = singularity:///usr/local/bin/pycbc_sngls_statmap
;The program combines output files generated by pycbc_sngls_findtrigs to generate a mapping between SNR and FAP/FAR, along with producing the combined foreground and background triggers.
;sngls_statmap_inj = singularity:///usr/local/bin/pycbc_sngls_statmap_inj
exclude_zerolag = singularity:///usr/local/bin/pycbc_exclude_zerolag


; #################### Mini Followup #########################################
foreground_minifollowup = singularity:///usr/local/bin/pycbc_foreground_minifollowup
;injection_minifollowup = singularity:///usr/local/bin/pycbc_injection_minifollowup
singles_minifollowup = singularity:///usr/local/bin/pycbc_sngl_minifollowup

html_snippet = singularity:///usr/local/bin/pycbc_create_html_snippet
;page_injinfo = singularity:///usr/local/bin/pycbc_page_injinfo
page_coincinfo = singularity:///usr/local/bin/pycbc_page_coincinfo
page_snglinfo = singularity:///usr/local/bin/pycbc_page_snglinfo
plot_trigger_timeseries = singularity:///usr/local/bin/pycbc_plot_trigger_timeseries
single_template_plot = singularity:///usr/local/bin/pycbc_single_template_plot
single_template = singularity:///usr/local/bin/pycbc_single_template
plot_singles_timefreq = singularity:///usr/local/bin/pycbc_plot_singles_timefreq
plot_snrratehist = singularity:///usr/local/bin/pycbc_page_snrratehist
plot_waveform = singularity:///usr/local/bin/pycbc_plot_waveform



; #################### Executable Memory Requirements ########################
[pegasus_profile]
; This section contains default profile information for every job
; This is overriden by profile information set for specific job types
; condor|accounting_group = sugwg.astro
pycbc|primary_site = condorpool_symlink
pycbc|submit-directory = ./
; This sets the initial memory footprint request
condor|+InitialRequestMemory = 11980
; Use the initial request unless the job has been evicted for using too much
; memory. In that case, ask for 50% more than the last resident memory use,
; ramping up by the number of job starts.
condor|request_memory = ifthenelse( (LastHoldReasonCode=!=34 && LastHoldReasonCode=!=26), InitialRequestMemory, int(2 * NumJobStarts * MemoryUsage) )
condor|request_disk = 5000
; If the job has been held for using too much memory, release it and let the
; memory request bump take effect
condor|periodic_release = ((HoldReasonCode =?= 34) || (HoldReasonCode =?= 26))
condor|+MaxRunTimeHours = 5

[pegasus_profile-condorpool_shared]
pycbc|site-scratch = ./
pycbc|unique-scratch = 
dagman|priority = 10000
condor|request_disk = 5000

; #################### Pegasus Configuration for Executable ##################
[pegasus_profile-inspiral]
condor|+InitialRequestMemory = 5000
#condor|request_memory = ifthenelse( (LastHoldReasonCode=!=34 && LastHoldReasonCode=!=26), InitialRequestMemory, int(1.5 * NumJobStarts * MemoryUsage) )
condor|periodic_hold = (JobStatus == 2) && ((CurrentTime - EnteredCurrentStatus) > (2 * 86400))
condor|periodic_release = ((HoldReasonCode =?= 34) || (HoldReasonCode =?= 26)) || ((JobStatus == 5) && (HoldReasonCode == 3) && (NumJobStarts < 5) && ((CurrentTime - EnteredCurrentStatus) > ( 300)))
condor|periodic_remove = (NumJobStarts >= 5)
condor|request_disk = 1000
dagman|retry = 10000
dagman|priority = 10000

[pegasus_profile-calculate_psd]
condor|+InitialRequestMemory = 9000
condor|request_disk = 10000
condor|request_cpus = ${calculate_psd|cores}
dagman|priority = 10000
dagman|retry = 10

[pegasus_profile-hdf_trigger_merge]
dagman|priority = 5000
condor|request_memory = 100GB
pycbc|site= condorpool_shared

[pegasus_profile-fit_over_param]
condor|request_memory = 20GB

[pegasus_profile-coinc]
; use different site options to check that they work
condor|request_memory = 50GB
#50GB
#using 51.2gb of mem raise to 60GB
#condor|request_disk = 30356988
condor|request_cpus = 2
pycbc|site = condorpool_shared


[pegasus_profile-bank2hdf]
dagman|priority = 5000

[pegasus_profile-merge_psds]
dagman|priority = 2000
condor|+MaxRunTimeHours = 15

[pegasus_profile-statmap]
condor|request_memory = 20GB
pycbc|site= condorpool_shared

[pegasus_profile-results_page]
pycbc|site = condorpool_shared
